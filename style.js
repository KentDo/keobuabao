//ph√¢n t√≠ch logic
//t·ª´ giao di·ªán c√°c n√∫t em l·∫•y id th√¨ ƒë∆∞·ª£c valuePlayer ="scissor, rock, paper"
//      t·ª´ d√≥ t√¨m indexPlayer th√¥ng qua item n√†o c√≥ id == valuePlayer
//t∆∞∆°ng t·ª± v·∫≠y v·ªõi indexComputer
//th·∫Øng 
//0 - 2 = -2}
//1 - 0 =  1} =>  indexPlayer - indexComputer = -2|1 => th·∫Øng => return 1
//2 - 1 =  1}
//h√≤a: c·∫£ 2 tr·ª´ nhau = 0: indexPlayer - indexComputer = 0 => return 0
//thua l√† c√≤n l·∫°i           return -1
const VALUES = [
    { id: "scissor", value: "‚úåüèº" }, //0
    { id: "rock", value: "üëäüèº" },   //1
    { id: "paper", value: "‚úãüèº" },    //2
];

//l√†m c∆° ch·∫ø c·ªßa m√°y
let i = 0;
const handleChange = () => {
    let computer = document.querySelector("#computer");
    computer.setAttribute("data-id", VALUES[i].id);
    computer.textContent = VALUES[i].value;
    // computer.innerHTML
    i = i == VALUES.length - 1 ? 0 : ++i;
};
let interval = setInterval(handleChange, 100);

//H√†m quy ƒë·ªïi valuePlayer v√† valueComputer "scissor | rock | paper"
// th√†nh indexPlayer v√† indexComputer
// r·ªìi so s√°nh 
const compare = (valuePlayer, valueComputer) => {
    let indexPlayer = VALUES.findIndex((item) => item.id == valuePlayer);
    let indexComputer = VALUES.findIndex((item) => item.id == valueComputer);
    let result = indexPlayer - indexComputer;
    if ([1, -2].includes(result)) {
        return 1;
    } else if (result == 0) {
        return 0;
    } else {
        return -1;
    }
};

//dom t·ªõi b·ªô item c·ªßa player
let playerItem = document.querySelectorAll(".user");
//duy·ªát t·∫•t c·∫£ c√°c item cho ch√∫ng l·∫Øng nghe s·ª± ki·ªán
playerItem.forEach((item) => {
    //n·∫øu item n√†o trong 3 th·∫±ng b·ªã click th√¨ l√†m
    item.addEventListener("click", (event) => {
        //d·ª´ng m√°y tr∆∞·ªõc
        clearInterval(interval);
        //l·∫•y valuePlayer v√† valueComputer
        let computer = document.querySelector("#computer");
        let valueComputer = computer.dataset.id;//getAttribute("data-id")
        let valuePlayer = event.target.id;
        let result = compare(valuePlayer, valueComputer);
        console.log(result);
        //duy·ªát danh s√°ch c√°c item v√† x√≥a class actived
        playerItem.forEach((_item) => {
            _item.classList.remove("actived");
            _item.style.pointerEvents = "none";
        })
        event.target.classList.add("actived");
        //l·∫•y gi√° tr·ªã so s√°nh tr∆∞·ªõc ƒë·ªÉ t·∫°o th√¥ng b√°o
        let alertDiv = document.createElement("div");
        alertDiv.classList.add("alert");
        let msg = "";
        if (result == 1) {
            msg = "b·∫°n th·∫Øng";
            alertDiv.classList.add("alert-success");
        } else if (result == 0) {
            msg = "B·∫°n h√≤a";
            alertDiv.classList.add("alert-warning");
        } else {
            msg = "b·∫°n thua";
            alertDiv.classList.add("alert-dark");
        }
        alertDiv.textContent = msg;
        document.querySelector(".notification").appendChild(alertDiv);
        document.querySelector(".play-again").classList.remove("d-none");
    })
});

//dom t·ªõi n√∫t ch∆°i l·∫°i v√† √©p n√≥ l·∫Øng nghe s·ª± ki·ªán
document.querySelector("#btn-play-again").addEventListener("click", (event) => {
    clearInterval(interval);
    interval = setInterval(handleChange, 100);
    //x√≥a actived v√† tr·∫£ l·∫°i kh·∫£ nƒÉng click
    playerItem.forEach((_item) => {
        _item.classList.remove("actived");
        _item.style.pointerEvents = "";
    })
    //x√≥a th√¥ng b√°o
    document.querySelector(".notification").innerHTML = "";
    document.querySelector(".play-again").classList.add("d-none");
})